// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoder
    // bit decomposition for C command:
    //   i |  x    x |  a | c1   c2   c3   c4   c5   c6 | d1   d2   d3 | j1   j2   j3
    // -------------------------------------------------------------------------------
    //  15 | 14 | 13 | 12 | 11 | 10 |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 
    //
    Not(in=instruction[15], out=commandA);      // 1: A command

    // ALU
    And(a=instruction[15], b=instruction[12], out=selAM);
    Mux16(a=regAout, b=inM, sel=selAM, out=muxAMout);
    ALU(x=regDout, y=muxAMout,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=outM, out=aluOut, zr=isOutZero, ng=isOutNegative);

    // A register
    And(a=instruction[15], b=instruction[5], out=destRegA);  
    Or(a=commandA, b=destRegA, out=loadRegA);                   // A register load flag: !i | (i & d1)
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=regAin);
    Register(in=regAin, load=loadRegA, out=regAout, out[0..14]=addressM);

    // D register
    And(a=instruction[15], b=instruction[4], out=loadRegD);     // D register load flag: i && d2
    Register(in=aluOut, load=loadRegD, out=regDout);

    // Memory write
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Program counter
    Not(in=isOutNegative, out=isOutPositive);
    Not(in=isOutZero, out=isOutNonZero);
    And(a=isOutPositive, b=isOutNonZero, out=isOutStronglyPositive);
    And(a=isOutStronglyPositive, b=instruction[0], out=jumpPositive);
    And(a=isOutNegative, b=instruction[2], out=jumpNegative);
    And(a=isOutZero, b=instruction[1], out=jumpZero);
    Or8Way(in[0]=jumpPositive, in[1]=jumpZero, in[2]=jumpNegative, in[3..7]=false, out=jump);
    And(a=instruction[15], b=jump, out=loadJumpAddress);
    PC(in=regAout, inc=true, load=loadJumpAddress, reset=reset, out[0..14]=pc);
}